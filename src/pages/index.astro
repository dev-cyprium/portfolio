---
import Layout from "../layouts/Layout.astro";
import { Image } from "@astrojs/image/components";
import profilePicture from "@assets/picture.jpg";
---

<Layout>
  <div>
    <canvas class="relative z-0" id="stars"></canvas>
    <div class="px-8 md:px-0">
      <div
        class="container -mt-24 mx-auto h-48 bg-slate-500 rounded-md relative z-10"
      >
        <div class="flex justify-center w-full">
          <Image
            class="object-cover w-28 h-28 rounded-full block -mt-14"
            src={profilePicture}
            alt="Stefan Kupresak"
          />
        </div>
        <div>
          <h1 class="text-4xl font-bold text-center text-white">
            Stefan Kupre≈°ak
          </h1>
          <h2 class="text-2xl font-bold text-center text-white">
            Senior Software Engineer
          </h2>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { Star } from "../class/star";
  import { Scene } from "../class/scene";

  const canvas = document.getElementById("stars") as HTMLCanvasElement;
  const scene = new Scene(canvas);
  const context = canvas.getContext("2d");

  if (context === null) {
    throw new Error("Could not get canvas context");
  }

  window.addEventListener("resize", () => {
    scene.init();
    scene.resize();
    scene.makeStars();
  });

  setupScene(context);
  function setupScene(context: CanvasRenderingContext2D) {
    scene.init();
    scene.resize();
    scene.makeStars();

    function drawBackground(ctx: CanvasRenderingContext2D) {
      const gradient = ctx.createLinearGradient(
        0,
        0,
        canvas.width,
        canvas.height
      );
      gradient.addColorStop(0, "#000");
      gradient.addColorStop(1, "#120A3A");
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
    }

    function animate(ctx: CanvasRenderingContext2D) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawBackground(ctx);
      const stars = scene.getStars();
      stars.forEach((star) => star.update(canvas.width, canvas.height));
      stars.forEach((star) => star.draw(ctx));
      Star.drawConnections(ctx, stars, scene.getMinDistanceThreshold());
      requestAnimationFrame(() => animate(ctx));
    }

    animate(context);
  }
</script>
