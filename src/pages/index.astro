---
import Layout from "../layouts/Layout.astro";
import { Image } from "@astrojs/image/components";
import { Icon } from "astro-icon";
import profilePicture from "@assets/picture.jpg";

const content = [
  {
    title: "Front-end",
    description: `I am a programmer with a specialized skill set in front-end
              development, with a strong command of popular frameworks like
              VueJS, AngularJS, and a passion for exploring emerging
              technologies such as Svelte. I am well-versed in the intricacies
              of front-end development, with an in-depth understanding of the
              latest frameworks, libraries, and tools. My focus is on creating
              seamless, engaging user experiences that leave a lasting
              impression on the end-user.`,
  },
  {
    title: "Back-end",
    description: `As a programmer with extensive experience in back-end development,
              I am adept at building high-quality systems that can handle
              significant traffic while prioritizing security and optimization.
              My expertise includes working with modern MVC frameworks, such as
              Phoenix, an Elixir OTP framework, and I am passionate about
              exploring new technologies to stay ahead of the curve. My goal is
              to deliver optimal results by leveraging my knowledge, experience,
              and commitment to excellence.`,
  },
  {
    title: "Full-stack",
    description: `As a full-stack programmer, I have a comprehensive understanding
              of both front-end and back-end development, allowing me to create
              seamless end-to-end solutions that deliver a superior user
              experience. I specialize in modern MVC frameworks like Phoenix,
              along with front-end technologies such as VueJS and AngularJS.
              With a passion for staying up-to-date with the latest industry
              trends, I am always eager to explore new technologies and
              approaches to deliver optimal results.`,
  },
];

const icons = [
  { name: "file-icons:phoenix", link: "#" },
  { name: "simple-icons:astro", link: "#" },
  { name: "mdi:language-typescript", link: "#" },
  { name: "mdi:react", link: "#" },
  { name: "icomoon-free:html-five", link: "#" },
  { name: "mdi:language-css3", link: "#" },
  { name: "simple-icons:nodedotjs", link: "#" },
  { name: "mdi:docker", link: "#" },
];
---

<Layout>
  <div>
    <canvas class="relative z-0" id="stars"></canvas>
    <div class="px-4 md:px-0">
      <div
        class="container -mt-24 mx-auto bg-slate-700 pb-4 rounded-md relative z-10"
      >
        <div class="flex justify-center w-full">
          <Image
            class="object-cover w-48 h-48 rounded-full block -mt-14"
            src={profilePicture}
            alt="Stefan Kupresak"
          />
        </div>
        <div class="hidden absolute right-5 top-5 md:flex gap-1">
          <a href="#">
            <Icon
              class="w-8 h-8 text-white hover:text-white transition-all"
              name="mdi:github"
            />
          </a>
          <a href="#">
            <Icon
              class="w-8 h-8 text-white hover:text-white transition-all"
              name="mdi:linkedin"
            />
          </a>
          <a href="#">
            <Icon
              class="w-8 h-8 text-white hover:text-white transition-all"
              name="mdi:email"
            />
          </a>
        </div>
        <h1 class="text-4xl font-bold text-center text-purple-400">
          Stefan Kupre≈°ak
        </h1>
        <h2 class="text-2xl text-center text-white mb-8">
          Senior Software Engineer
        </h2>
        <div class="flex justify-center items-center gap-2 md:hidden">
          <a href="#">
            <Icon
              class="w-8 h-8 text-white hover:text-white transition-all"
              name="mdi:github"
            />
          </a>
          <a href="#">
            <Icon
              class="w-8 h-8 text-white hover:text-white transition-all"
              name="mdi:linkedin"
            />
          </a>
          <a href="#">
            <Icon
              class="w-8 h-8 text-white hover:text-white transition-all"
              name="mdi:email"
            />
          </a>
        </div>
        <div class="grid grid-cols-3 text-white gap-3 mx-4">
          {
            content.map((item) => (
              <div class="col-span-3 md:col-span-1">
                <h3 class="text-3xl mt-3 lg:mt-0 mb-3 text-purple-400 text-center">
                  {item.title}
                </h3>
                <p class="leading-7 text-lg">{item.description}</p>
              </div>
            ))
          }
        </div>
      </div>

      <h1 class="text-center text-5xl text-white my-10">
        Favorite technologies
      </h1>
      <div
        class="container mx-auto justify-center items-center flex flex-wrap gap-8"
      >
        {
          icons.map((icon) => (
            <a href={icon.link} target="_blank">
              <Icon
                class="w-20 h-20 text-slate-600 hover:text-purple-500 transition-all"
                name={icon.name}
              />
            </a>
          ))
        }
      </div>
    </div>
  </div>
</Layout>

<script>
  import { Star } from "../class/star";
  import { Scene } from "../class/scene";

  const canvas = document.getElementById("stars") as HTMLCanvasElement;
  const scene = new Scene(canvas);
  const context = canvas.getContext("2d");

  if (context === null) {
    throw new Error("Could not get canvas context");
  }

  window.addEventListener("resize", () => {
    scene.init();
    scene.resize();
    scene.makeStars();
  });

  setupScene(context);
  function setupScene(context: CanvasRenderingContext2D) {
    scene.init();
    scene.resize();
    scene.makeStars();

    function drawBackground(ctx: CanvasRenderingContext2D) {
      const gradient = ctx.createLinearGradient(
        0,
        0,
        canvas.width,
        canvas.height
      );
      gradient.addColorStop(0, "#000");
      gradient.addColorStop(1, "#120A3A");
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
    }

    function animate(ctx: CanvasRenderingContext2D) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawBackground(ctx);
      const stars = scene.getStars();
      stars.forEach((star) => star.update(canvas.width, canvas.height));
      stars.forEach((star) => star.draw(ctx));
      Star.drawConnections(ctx, stars, scene.getMinDistanceThreshold());
      requestAnimationFrame(() => animate(ctx));
    }

    animate(context);
  }
</script>
